(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.pure = {})));
}(this, (function (exports) { 'use strict';

  var create = Object.create,
      getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
      getOwnPropertyNames = Object.getOwnPropertyNames,
      getOwnPropertySymbols = Object.getOwnPropertySymbols;

  /**
   * @function copyPropertyDescriptors
   *
   * @description
   * copy the property descriptors from the source to the target
   *
   * @param {Object} target the target to add the property descriptors to
   * @param {Object} source the source to get the property descriptors from
   * @param {Array<string|symbol>} properties the properties to add
   * @returns {Object} the object with passed property descriptors
   */

  var copyPropertyDescriptors = function copyPropertyDescriptors(target, source, properties) {
    return Object.defineProperties(target, properties.reduce(function (descriptors, key) {
      descriptors[key] = getOwnPropertyDescriptor(source, key);

      return descriptors;
    }, create(null)));
  };

  /**
   * @function getPropertySymbols
   *
   * @description
   * get the symbols on the prototype
   *
   * @param {Object} prototype the prototype to get the symbols from
   * @returns {Array<symbol>} the symbols to copy
   */
  var getPropertySymbols = function getPropertySymbols(prototype) {
    return typeof getOwnPropertySymbols === 'function' ? getOwnPropertySymbols(prototype) : [];
  };

  /**
   * @function getProperties
   *
   * @description
   * get the properties to copy from the object
   *
   * @param {Object} object the object to get the properties from
   * @returns {Array<string|symbol>} the properties to copy
   */
  var getOwnProperties = function getOwnProperties(object) {
    return getOwnPropertyNames(object).concat(getPropertySymbols(object));
  };

  /**
   * @function getPrototype
   *
   * @description
   * get the prototype object based on the prototype passed
   *
   * @param {Object} prototype the prototype to copy
   * @returns {Object} the copied prototype object
   */
  var getPrototype = function getPrototype(prototype) {
    return prototype ? copyPropertyDescriptors(create(null), prototype, getOwnProperties(prototype)) : prototype;
  };

  // utils

  var create$1 = Object.create;

  /**
   * @function pure
   *
   * @description
   * create an object with no additional prototypical methods beyond
   * what is passed in the second parameter
   *
   * @param {Object} [object={}] the object to create a pure version of
   * @param {Object} [prototype=null] the prototype to apply to the pure object
   * @return {Object} the pure object
   */

  var pure = function pure() {
    var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var prototype = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var properties = getOwnProperties(object);

    if (!properties.length) {
      return create$1(null);
    }

    var target = create$1(getPrototype(prototype));

    return copyPropertyDescriptors(target, object, properties);
  };

  exports.default = pure;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pure-object.js.map
