'use strict';

exports.__esModule = true;
var create = Object.create,
    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
    getOwnPropertyNames = Object.getOwnPropertyNames,
    getOwnPropertySymbols = Object.getOwnPropertySymbols;

/**
 * @function copyPropertyDescriptors
 *
 * @description
 * copy the property descriptors from the source to the target
 *
 * @param {Object} target the target to add the property descriptors to
 * @param {Object} source the source to get the property descriptors from
 * @param {Array<string|symbol>} properties the properties to add
 * @returns {Object} the object with passed property descriptors
 */

var copyPropertyDescriptors = exports.copyPropertyDescriptors = function copyPropertyDescriptors(target, source, properties) {
  return Object.defineProperties(target, properties.reduce(function (descriptors, key) {
    descriptors[key] = getOwnPropertyDescriptor(source, key);

    return descriptors;
  }, create(null)));
};

/**
 * @function getPropertySymbols
 *
 * @description
 * get the symbols on the prototype
 *
 * @param {Object} prototype the prototype to get the symbols from
 * @returns {Array<symbol>} the symbols to copy
 */
var getPropertySymbols = exports.getPropertySymbols = function getPropertySymbols(prototype) {
  return typeof getOwnPropertySymbols === 'function' ? getOwnPropertySymbols(prototype) : [];
};

/**
 * @function getProperties
 *
 * @description
 * get the properties to copy from the object
 *
 * @param {Object} object the object to get the properties from
 * @returns {Array<string|symbol>} the properties to copy
 */
var getOwnProperties = exports.getOwnProperties = function getOwnProperties(object) {
  return getOwnPropertyNames(object).concat(getPropertySymbols(object));
};

/**
 * @function getPrototype
 *
 * @description
 * get the prototype object based on the prototype passed
 *
 * @param {Object} prototype the prototype to copy
 * @returns {Object} the copied prototype object
 */
var getPrototype = exports.getPrototype = function getPrototype(prototype) {
  return prototype ? copyPropertyDescriptors(create(null), prototype, getOwnProperties(prototype)) : prototype;
};