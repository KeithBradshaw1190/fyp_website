{"remainingRequest":"C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\src\\components\\GroceryDashboard.vue?vue&type=template&id=3ca6e692&scoped=true&","dependencies":[{"path":"C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\src\\components\\GroceryDashboard.vue","mtime":1587600333900},{"path":"C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgaWQ9Imdyb2NlcnktZGFzaGJvYXJkIiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIGJnLWxpZ2h0Ij4KICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgPFNpZGViYXIgLz4KICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IG1sLXNtLWF1dG8gY29sLWxnLTkgcHQtNCBwbC00Ij4KICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2CiAgICAgICAgICBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGZsZXgtd3JhcCBmbGV4LW1kLW5vd3JhcCBhbGlnbi1pdGVtcy1jZW50ZXIgcGItMSBtYi0zIgogICAgICAgID4KICAgICAgICAgIDxoMSBjbGFzcz0iaDIiPldlbGNvbWUgdG8gdGhlIFNtYXJ0R3JvY2VyeSBEYXNoYm9hcmQ8L2gxPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1EYXNoYm9hcmQgY29udGVudCAgLS0+CiAgICAgICAgPCEtLSBEaXNwbGF5ZWQgaW4gdGhlc2UgcG9zc2libGUgc2VnbWVudHMgCiAgICAgICAgICAtRmlyc3QgU2lnbiB1cCghZGVsaXZlcnlFeGlzdHMgJiYhcGlja3VwRXhpc3RzKSYmKCF2ZXJpZmllZCAmJiAhbGlzdENyZWF0ZWQgJiYgIW1lc3NlbmdlckxpbmspCiAgICAgICAgICAtUHJvY2VzcyBvZiBsaW5raW5nIGhhcyBiZWd1biBtYWludGFpbiB0aGUgYWJvdmUgYnV0IGRpc3BsYXkgc3VjY2VzcyBvbiBjYXJkcyB0aGF0IGFyZSB2YWxpZAogICAgICAgICAgLWlmKCFkZWxpdmVyeUV4aXN0cyAmJiFwaWNrdXBFeGlzdHMpJiYodmVyaWZpZWQgJiYgbGlzdENyZWF0ZWQgJiYgbWVzc2VuZ2VyTGluayktPk1lc3NhZ2UgQm90IGNhcmRzCiAgICAgICAgICBlbHNlKGRlbGl2ZXJ5RXhpc3RzICYmcGlja3VwRXhpc3RzKQogICAgICAgIC0tPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciB0ZXh0LWNlbnRlciBtdC0zIHB0LTMiIHYtaWY9IiFsb2FkaW5nU2NyZWVuIj4KICAgICAgICAgIDxkaXYgY2xhc3M9Imxkcy1mYWNlYm9vayBtdC0zIHB0LTMiPgogICAgICAgICAgICA8ZGl2PjwvZGl2PgogICAgICAgICAgICA8ZGl2PjwvZGl2PgogICAgICAgICAgICA8ZGl2PjwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8aDEgY2xhc3M9InNtYWxsIj5Mb2FkaW5nIERldGFpbHMuLi5UaGlzIHdvbnQgdGFrZSBsb25nITwvaDE+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIiB2LWlmPSIhbG9hZGluZ1NjcmVlbiI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciIHYtaWY9IighZGVsaXZlcnlFeGlzdHMgJiYhcGlja3VwRXhpc3RzKSI+CiAgICAgICAgICAgIDwhLS0gR3JpZCBjb2x1bW4gZm9yIGluaXRpYWwgc2lnbiB1cC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBtYi00Ij4KICAgICAgICAgICAgICA8IS0tQ2FyZC0tPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiIHYtaWY9IighbGlzdENyZWF0ZWR8fCFtZXNzZW5nZXJMaW5rKSAmJiAodmVyaWZpZWQpIj4KICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iY2FyZC10aXRsZSB0ZXh0LWNlbnRlciBtdC0zIj5TaG9wcGluZyBBY2NvdW50PC9oNT4KICAgICAgICAgICAgICAgIDwhLS1DYXJkIGltYWdlLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICAgICAgICA8IS0tIExpbmsgQWNjb3VudCBIYWxmIC0tPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtc3RvcmUgdGV4dC1jZW50ZXIiIHN0eWxlPSJmb250LXNpemU6M3JlbTsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRleHQiPlNob3BwaW5nIEFjY291bnQgaGFzIGJlZW4gbGlua2VkIHN1Y2Nlc3NmdWxseS48L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHAtMSIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtY2hlY2sgdGV4dC1jZW50ZXIgdGV4dC1zdWNjZXNzIiBzdHlsZT0iZm9udC1zaXplOjNyZW07Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8IS0tLy5DYXJkLS0+CgogICAgICAgICAgICAgIDwhLS1DYXJkIGluaXRpYWwgc2lnbiB1cC0tPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiIHYtaWY9IighbGlzdENyZWF0ZWR8fCFtZXNzZW5nZXJMaW5rKSAmJiAoIXZlcmlmaWVkKSI+CiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImNhcmQtdGl0bGUgdGV4dC1jZW50ZXIgbXQtMyBoLTEwMCI+Rmlyc3RseSBMaW5rIFNob3BwaW5nIEFjY291bnQ8L2g1PgogICAgICAgICAgICAgICAgPCEtLUNhcmQgaW1hZ2UtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSByb3ciPgogICAgICAgICAgICAgICAgICA8IS0tIExpbmsgQWNjb3VudCBIYWxmIC0tPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtc3RvcmUgdGV4dC1jZW50ZXIiIHN0eWxlPSJmb250LXNpemU6M3JlbTsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRleHQiPlRoaXMgYWxsb3dzIHlvdSB0byBvcmRlciBkZWxpdmVyaWVzICZhbXA7IHBpY2t1cHMuPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwhLS0gPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1jaGVjayB0ZXh0LWNlbnRlciB0ZXh0LXN1Y2Nlc3MiIHN0eWxlPSJmb250LXNpemU6M3JlbTsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2Pi0tPgogICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tZGFyayBidG4tZmlsbCBidG4td2QgcC0yIG0tMiB0ZXh0LXdoaXRlIgogICAgICAgICAgICAgICAgICAgICAgdG89Ii92ZXJpZnktZGV0YWlscyIKICAgICAgICAgICAgICAgICAgICA+TGluayBBY2NvdW50PC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8IS0tLy5DYXJkIGluaXRpYWwgc2lnbiB1cC0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLSAgR3JpZCBjb2x1bW4gIC0tPgoKICAgICAgICAgICAgPCEtLSBHcmlkIGNvbHVtbiAtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgbWItNCI+CiAgICAgICAgICAgICAgPCEtLUNhcmQtLT4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIiB2LWlmPSIoIXZlcmlmaWVkfHwhbWVzc2VuZ2VyTGluaykgJiYgKCFsaXN0Q3JlYXRlZCkiPgogICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJjYXJkLXRpdGxlIHRleHQtY2VudGVyIG10LTMiPlRoZW4gQ3JlYXRlIGEgR3JvY2VyeSBMaXN0PC9oNT4KICAgICAgICAgICAgICAgIDwhLS1DYXJkIGltYWdlLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgcm93Ij4KICAgICAgICAgICAgICAgICAgPCEtLSBMaW5rIEFjY291bnQgSGFsZiAtLT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXNob3BwaW5nLWNhcnQgdGV4dC1jZW50ZXIiIHN0eWxlPSJmb250LXNpemU6M3JlbTsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgIDxwCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjYXJkLXRleHQiCiAgICAgICAgICAgICAgICAgICAgICA+R3JvY2VyeSBsaXN0cyBhcmUgdXNlZCB0byBmaW5kIHJlY2lwZXMgJmFtcDsgbWFrZSBvcmRlcnM8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1kYXJrIGJ0bi1maWxsIGJ0bi13ZCBwLTIgbS0yIHRleHQtd2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICB0bz0iL2FkZEl0ZW0iCiAgICAgICAgICAgICAgICAgICAgPkNyZWF0ZSBGaXJzdCBMaXN0PC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8IS0tLy5DYXJkLS0+CiAgICAgICAgICAgICAgPCEtLUNhcmQtLT4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIiB2LWlmPSIoIXZlcmlmaWVkIHx8ICFtZXNzZW5nZXJMaW5rKSAmJiAobGlzdENyZWF0ZWQpIj4KICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iY2FyZC10aXRsZSB0ZXh0LWNlbnRlciBtdC0zIj5Hcm9jZXJ5IExpc3Q8L2g1PgogICAgICAgICAgICAgICAgPCEtLUNhcmQgaW1hZ2UtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgICAgIDwhLS0gTGluayBBY2NvdW50IEhhbGYgLS0+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1zaG9wcGluZy1jYXJ0IHRleHQtY2VudGVyIiBzdHlsZT0iZm9udC1zaXplOjNyZW07Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10ZXh0Ij5Zb3UgaGF2ZSBzdWNjZXNzZnVsbHkgY3JlYXRlZCBhIGdyb2NlcnkgbGlzdC48L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHAtMSIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtY2hlY2sgdGV4dC1jZW50ZXIgdGV4dC1zdWNjZXNzIiBzdHlsZT0iZm9udC1zaXplOjNyZW07Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8IS0tLy5DYXJkLS0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tIEdyaWQgY29sdW1uIC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbWItNCI+CiAgICAgICAgICAgICAgPCEtLUNhcmQgaW5pdGlhbCBzaWduIHVwLS0+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCIgdi1pZj0iKCF2ZXJpZmllZCB8fCAhbGlzdENyZWF0ZWQgfHwgIW1lc3NlbmdlckxpbmspIj4KICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iY2FyZC10aXRsZSB0ZXh0LWNlbnRlciBtdC0zIj5NZXNzYWdlIHRoZSBCb3Q8L2g1PgogICAgICAgICAgICAgICAgPCEtLUNhcmQgaW1hZ2UtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgICAgIDwhLS0gTGluayBBY2NvdW50IEhhbGYgLS0+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgPGkKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhYiBmYS1mYWNlYm9vay1tZXNzZW5nZXIgdGV4dC1jZW50ZXIgdGV4dC1wcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOjNyZW07IgogICAgICAgICAgICAgICAgICAgICAgPjwvaT4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICBDbGljayB0aGUgc2VuZCBtZXNzYWdlIGJ1dHRvbiBvbiB0aGUgZmFjZWJvb2sgcGFnZSBmb2xsb3dlZCBieSAnR2V0IHN0YXJ0ZWQnIGluIHRoZSBjaGF0IHdpbmRvdy4KICAgICAgICAgICAgICAgICAgICAgICAgWW91J2xsIGJlIHByb21wdGVkIHRvIHNpZ24gaW50byB5b3VyIFNtYXJ0R3JvY2VyeSBhY2NvdW50LiBBZnRlciB0aGF0IHlvdSBhcmUgYWxsIHNldCB1cCEKICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWRhcmsgYnRuLWZpbGwgYnRuLXdkIHAtMiBtLTIgdGV4dC13aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9TbWFydEdyb2NlcnktMTAzOTcwNTUxMTc3MDc0IgogICAgICAgICAgICAgICAgICAgID5TZW5kIE1lc3NhZ2U8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLS8uQ2FyZC0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLSBHcmlkIGNvbHVtbiAtLT4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDwhLS0gV2hlbiBWZXJpZmllZCAtLT4KICAgICAgICAgIDxkaXYgdi1pZj0iKHZlcmlmaWVkICYmIGxpc3RDcmVhdGVkICYmIG1lc3NlbmdlckxpbmspIiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiB2LWlmPSJkZWxpdmVyeUV4aXN0cyIgY2xhc3M9ImNvbC1tZC02IGNvbC14bC02IHB0LTQiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ibG9jayI+CiAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibS1iLTIwIHRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXRydWNrIiBzdHlsZT0iZm9udC1zaXplOjE4cHg7Ij48L2k+IExhdGVzdCBEZWxpdmVyeSBEZXRhaWxzCiAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgICAgIDxiciAvPgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImNvbC02IG10LTIiPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1jbGlwYm9hcmQtbGlzdCIgc3R5bGU9ImZvbnQtc2l6ZToxOHB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAge3sgZGVsaXZlcnlMaXN0IH19CiAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImNvbC02IG10LTIiPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1jYWxlbmRhci1kYXkiIHN0eWxlPSJmb250LXNpemU6MThweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgIERhdGUge3sgZGVsaXZlcnlEYXRlIH19CiAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImNvbC02IG10LTIiPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhciBmYS1jbG9jayIgc3R5bGU9ImZvbnQtc2l6ZToxOHB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgRXhwZWN0IGF0IHt7IGRlbGl2ZXJ5VGltZS5zbGljZSgwLCAtMykgfX0KICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iY29sLTYgbXQtMiI+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWV1cm8tc2lnbiBtdC0xIiBzdHlsZT0iZm9udC1zaXplOjE4cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICBDb3N0IHt7IGRlbGl2ZXJ5Q29zdCB9fQogICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPCEtLSBERWxpdmVyeSBEb2VzbnQgRXhpc3QgLS0+CgogICAgICAgICAgICA8ZGl2IHYtaWY9IiFkZWxpdmVyeUV4aXN0cyIgY2xhc3M9ImNvbC1tZC02IGNvbC14bC02IHB0LTQiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ibG9jayI+CiAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0idGV4dC1jZW50ZXIiPlNjaGVkdWxlIGEgRGVsaXZlcnkhPC9oNT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICA8aQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmFiIGZhLWZhY2Vib29rLW1lc3NlbmdlciB0ZXh0LWNlbnRlciB0ZXh0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6M3JlbTsiCiAgICAgICAgICAgICAgICAgICAgICA+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC1jZW50ZXIiPk5vIERlbGl2ZXJpZXMgaGF2ZSBiZWVuIG1hZGUgeWV0ITwvc21hbGw+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPCEtLTxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIGJ0bi1pbmZvIGJ0bi1maWxsIGJ0bi13ZCBwLTIiPlVwZGF0ZSBEZXRhaWxzPC9idXR0b24+LS0+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9TbWFydEdyb2NlcnktMTAzOTcwNTUxMTc3MDc0IgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tZGFyayBidG4tZmlsbCBidG4td2QgcC0yIG0tMiIKICAgICAgICAgICAgICAgICAgICA+U2NoZWR1bGUgYSBEZWxpdmVyeTwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0gRW5kIG9mIGRlaWx2ZXJ5IGRvZXNudCBleGlzdCAtLT4KICAgICAgICAgICAgPGRpdiB2LWlmPSJwaWNrdXBFeGlzdHMiIGNsYXNzPSJjb2wtbWQtNiBjb2wteGwtNiBwdC00Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYmxvY2siPgogICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im0tYi0yMCB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1zaG9wcGluZy1iYXNrZXQiIHN0eWxlPSJmb250LXNpemU6MjJweDsiPjwvaT4gTGF0ZXN0IFBpY2t1cCBEZXRhaWxzCiAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgPCEtLSA8c21hbGw+TGlzdCBOYW1lOiB7eyBwaWNrdXBMaXN0IH19PC9zbWFsbD4gLS0+CiAgICAgICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgICAgIDxiciAvPgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImNvbC02IG10LTIiPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1jbGlwYm9hcmQtbGlzdCIgc3R5bGU9ImZvbnQtc2l6ZToxOHB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAge3sgcGlja3VwTGlzdCB9fQogICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJjb2wtNiBtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtY2FsZW5kYXItZGF5IiBzdHlsZT0iZm9udC1zaXplOjE4cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICBEYXRlIHt7IHBpY2t1cERhdGUgfX0KICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iY29sLTYgbXQtMiI+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFyIGZhLWNsb2NrIiBzdHlsZT0iZm9udC1zaXplOjE4cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICBSZWFkeSBhdCB7eyBwaWNrdXBUaW1lLnNsaWNlKDAsIC0zKSB9fQogICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJjb2wtNiBtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZXVyby1zaWduIG10LTEiIHN0eWxlPSJmb250LXNpemU6MThweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgIENvc3Qge3sgcGlja3VwQ29zdCB9fQogICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPCEtLSBQaWNrdXAgRG9lc250IEV4aXN0IC0tPgoKICAgICAgICAgICAgPGRpdiB2LWlmPSIhcGlja3VwRXhpc3RzIiBjbGFzcz0iY29sLW1kLTYgY29sLXhsLTYgcHQtNCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJ0ZXh0LWNlbnRlciI+U2NoZWR1bGUgYSBQaWNrdXAhPC9oNT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICA8aQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmFiIGZhLWZhY2Vib29rLW1lc3NlbmdlciB0ZXh0LWNlbnRlciB0ZXh0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6M3JlbTsiCiAgICAgICAgICAgICAgICAgICAgICA+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC1jZW50ZXIiPk5vIFBpY2t1cHMgaGF2ZSBoYXZlIGJlZW4gbWFkZSB5ZXQhPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8IS0tPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLWluZm8gYnRuLWZpbGwgYnRuLXdkIHAtMiI+VXBkYXRlIERldGFpbHM8L2J1dHRvbj4tLT4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL1NtYXJ0R3JvY2VyeS0xMDM5NzA1NTExNzcwNzQiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1kYXJrIGJ0bi1maWxsIGJ0bi13ZCBwLTIgbS0yIgogICAgICAgICAgICAgICAgICAgID5TY2hlZHVsZSBhIFBpY2t1cDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0gRW5kIG9mIGRlaWx2ZXJ5IGRvZXNudCBleGlzdCAtLT4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPCEtLSBFbmQgb2YgV2hlbiBWZXJpZmllZCAtLT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIEVuZCBvZiBEYXNoYm9hcmQgY29udGVudCAtLT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+Cg=="},null]}