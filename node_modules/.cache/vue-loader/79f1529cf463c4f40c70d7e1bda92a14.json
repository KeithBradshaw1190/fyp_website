{"remainingRequest":"C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\src\\components\\HomePage.vue?vue&type=template&id=df02a584&scoped=true&","dependencies":[{"path":"C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\src\\components\\HomePage.vue","mtime":1587946293762},{"path":"C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Work Account\\Documents\\4th Year\\Software Development\\smartgrocery\\smartgrocery\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}